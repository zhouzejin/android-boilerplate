apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'kotlin-kapt'
apply from: '../config/quality/quality.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode rootProject.ext.versionCode
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName rootProject.ext.versionName

        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
    }

    signingConfigs {
        // 读取release版本的签名文件
        Properties localProps = new Properties()
        localProps.load(new FileInputStream(file('../local.properties')))

        Properties keyProps = new Properties()
        if (localProps['keystore.properties.file']) {
            keyProps.load(new FileInputStream(file(localProps['keystore.properties.file'])))
        } else {
            // 如果读取不到'keystore.props.file'属性，就使用默认的debug keystore
            keyProps["store"] = '../debug.keystore'
            keyProps["alias"] = 'androiddebugkey'
            keyProps["storePass"] = 'android'
            keyProps["pass"] = 'android'
        }

        release {
            // release版本使用assert确保存在该属性否则报错，避免错误打包
            assert localProps['keystore.properties.file'] != null

            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
        }

        debug {
            signingConfig signingConfigs.debug

            versionNameSuffix "Debug"
            debuggable true
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }

        // add dagger generated files (works only with debug build)
        test.java.srcDirs += ['build/generated/source/apt/androidTest/debug']
    }

    // APK Splits
    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'x86' // 'x86', 'armeabi-v7a', 'mips'
            universalApk true
        }
    }

    packagingOptions {
        exclude 'LICENSE'
        exclude 'README.md'
    }
}

dependencies {
    final SUPPORT_LIBRARY_VERSION = '27.1.1'

    final DAGGER_VERSION = '2.17'

    final RXJAVA_VERSION = '2.2.0'
    final RXANDROID_VERISON = '2.1.0'

    final RETROFIT_VERSION = '2.4.0'
    final OKHTTP_VERSION = '3.11.0'

    final SQLBRITE_VERSION = '3.2.0'
    final SUPPORT_SQLBRITE_VERSION = '1.0.0'

    final AUTO_VALUE_VERSION = '1.6.2'
    final AUTO_VALUE_PARCEL_VERSION = '0.2.6'
    final AUTO_VALUE_GSON_VERSION = '0.8.0'
    final GSON_VERSION = '2.8.5'

    final GLIDE_VERSION = '3.8.0'

    final BUTTERKNIFE_VERSION = '8.8.1'

    final TIMBER_VERSION = '4.7.1'

    final JUNIT_VERSION = '4.12'
    final MOCKITO_VERSION = '2.20.1'
    final HAMCREST_VERSION = '1.3'
    final ROBOLECTRIC_VERSION = '3.8'

    final ESPRESSO_VERSION = '3.0.2'
    final SUPPORT_TEST_VERSION = '1.0.2'


    def libSupportAppcompatV7 = "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    def libSupportRecyclerviewV7 = "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    def libSupportCardviewV7 = "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    def libSupportAnnotations = "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"

    def libKotlinStdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION"

    def libDagger = "com.google.dagger:dagger:$DAGGER_VERSION"
    def libDaggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"

    def libRxjava = "io.reactivex.rxjava2:rxjava:$RXJAVA_VERSION"
    def libRxandroid = "io.reactivex.rxjava2:rxandroid:$RXANDROID_VERISON"

    def libRetrofit = "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    def libConverterGson = "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    def libAdapterRxjava = "com.squareup.retrofit2:adapter-rxjava2:$RETROFIT_VERSION"
    def libLoggingInterceptor = "com.squareup.okhttp3:logging-interceptor:$OKHTTP_VERSION"

    def libSqlbrite = "com.squareup.sqlbrite3:sqlbrite:$SQLBRITE_VERSION"
    def libSqlbriteKotlin = "com.squareup.sqlbrite3:sqlbrite-kotlin:$SQLBRITE_VERSION"
    def supportSqliteFramework = "android.arch.persistence:db-framework:$SUPPORT_SQLBRITE_VERSION"

    def libAutoValueAnnotations = "com.google.auto.value:auto-value-annotations:$AUTO_VALUE_VERSION"
    def libAutoValue = "com.google.auto.value:auto-value:$AUTO_VALUE_VERSION"
    def libAutoValueParcelAdapter = "com.ryanharter.auto.value:auto-value-parcel-adapter:$AUTO_VALUE_PARCEL_VERSION"
    def libAutoValueParcel = "com.ryanharter.auto.value:auto-value-parcel:$AUTO_VALUE_PARCEL_VERSION"
    def libAutoValueGsonAnnotations = "com.ryanharter.auto.value:auto-value-gson-annotations:$AUTO_VALUE_GSON_VERSION"
    def libAutoValueGson = "com.ryanharter.auto.value:auto-value-gson:$AUTO_VALUE_GSON_VERSION"
    def libGson = "com.google.code.gson:gson:$GSON_VERSION"

    def libGlide = "com.github.bumptech.glide:glide:$GLIDE_VERSION"

    def libButterknife = "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"
    def libButterknifeCompiler = "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"

    def libTimber = "com.jakewharton.timber:timber:$TIMBER_VERSION"

    def libJUnit = "junit:junit:$JUNIT_VERSION"
    def libMockitoCore = "org.mockito:mockito-core:$MOCKITO_VERSION"
    def libMockitoAndroid = "org.mockito:mockito-android:$MOCKITO_VERSION"
    def libHamcrestCore = "org.hamcrest:hamcrest-core:$HAMCREST_VERSION"
    def libHamcrestLibrary = "org.hamcrest:hamcrest-library:$HAMCREST_VERSION"
    def libHamcrestIntegration = "org.hamcrest:hamcrest-integration:$HAMCREST_VERSION"
    def libRobolectric = "org.robolectric:robolectric:$ROBOLECTRIC_VERSION"

    def libEspressoContrib = "com.android.support.test.espresso:espresso-contrib:$ESPRESSO_VERSION"
    def libEspressoCore = "com.android.support.test.espresso:espresso-core:$ESPRESSO_VERSION"
    def libSupportTestRunner = "com.android.support.test:runner:$SUPPORT_TEST_VERSION"
    def libSupportTestRules = "com.android.support.test:rules:$SUPPORT_TEST_VERSION"


    // App Dependencies
    implementation libSupportAppcompatV7
    implementation libSupportRecyclerviewV7
    implementation libSupportCardviewV7
    implementation libSupportAnnotations

    implementation libKotlinStdlib

    implementation libDagger
    kapt libDaggerCompiler
    kaptTest libDaggerCompiler
    kaptAndroidTest libDaggerCompiler

    implementation libRxjava
    implementation libRxandroid

    implementation libRetrofit
    implementation libConverterGson
    implementation libAdapterRxjava
    implementation libLoggingInterceptor

    implementation(libSqlbrite) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation libSqlbriteKotlin
    implementation supportSqliteFramework

    implementation libAutoValueAnnotations
    kapt libAutoValue
    implementation libAutoValueParcelAdapter
    kapt libAutoValueParcel
    implementation libAutoValueGsonAnnotations
    kapt libAutoValueGson
    implementation libGson

    implementation libGlide

    implementation libButterknife
    kapt libButterknifeCompiler

    implementation libTimber


    // Unit tests dependencies
    testImplementation libJUnit
    testImplementation libMockitoCore
    testImplementation libHamcrestCore
    testImplementation libHamcrestLibrary
    testImplementation libHamcrestIntegration
    testImplementation libRobolectric


    // Instrumentation test dependencies
    androidTestImplementation libJUnit
    androidTestImplementation libMockitoCore
    androidTestImplementation libMockitoAndroid
    androidTestImplementation libSupportAnnotations
    androidTestImplementation(libEspressoContrib) {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestImplementation libEspressoCore
    androidTestImplementation libSupportTestRunner
    androidTestImplementation libSupportTestRules
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
